<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SizingServers.IPC</name>
    </assembly>
    <members>
        <member name="T:SizingServers.IPC.EndPointManagerServiceConnectionException">
            <summary>
            Thrown when could not connect to the epms via EndPointManagerServiceConnection.GetClient();
            </summary>
        </member>
        <member name="M:SizingServers.IPC.EndPointManagerServiceConnectionException.#ctor(System.String)">
            <summary>
            Thrown when could not connect to the epms via EndPointManagerServiceConnection.GetClient();
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:SizingServers.IPC.MessageEventArgs">
            <summary>
            </summary>
        </member>
        <member name="P:SizingServers.IPC.MessageEventArgs.Message">
            <summary>
            The sent or received message.
            </summary>
        </member>
        <member name="T:SizingServers.IPC.Receiver">
            <summary>
            <para>Add a new Receiver in the code of the process you want to receive messages. Make sure the handles matches the one of the Sender.</para>
            <para>This inter process communication only works on the same machine and in the same Windows session.</para>
            </summary>
        </member>
        <member name="E:SizingServers.IPC.Receiver.MessageReceived">
            <summary>
            
            </summary>
        </member>
        <member name="P:SizingServers.IPC.Receiver.IsDisposed">
            <summary>
            
            </summary>
        </member>
        <member name="P:SizingServers.IPC.Receiver.Handle">
            <summary>
            <para>The handle is a value shared by a Sender and its Receivers.</para>
            <para>It links both parties so messages from a Sender get to the right Receivers.</para>
            <para>Make sure this is a unique value: use a GUID for instance:</para>
            <para>There is absolutely no checking to see if this handle is used in another Sender - Receivers relation.</para>
            </summary>
        </member>
        <member name="P:SizingServers.IPC.Receiver.EndPointManagerServiceConnection">
            <summary>
            <para>This is an optional parameter in the constructor.</para>
            <para>If you don't use it, receiver end points are stored in the Windows registry and IPC communication is only possible for processes running under the current local user.</para>
            <para>If you do use it, these end points are fetched from a Windows service over tcp, making it a distributed IPC.This however will be slower and implies a security risk since there will be network traffic.</para>
            </summary>
        </member>
        <member name="M:SizingServers.IPC.Receiver.#ctor(System.String,SizingServers.IPC.EndPointManagerServiceConnection)">
            <summary>
            Receives messages of a Sender having the same handle.
            </summary>
            <param name="handle">
            <para>The handle is a value shared by a Sender and its Receivers.  , * + and - cannot be used!</para>
            <para>It links both parties so messages from a Sender get to the right Receivers.</para>
            <para>Make sure this is a unique value: use a GUID for instance:</para>
            <para>There is absolutely no checking to see if this handle is used in another Sender - Receivers relation.</para>
            </param>
            <param name="endPointManagerServiceConnection">
            <para>This is an optional parameter.</para>
            <para>If you don't use it, receiver end points are stored in the Windows registry and IPC communication is only possible for processes running under the current local user.</para>
            <para>If you do use it, these end points are fetched from a Windows service over tcp, making it a distributed IPC.This however will be slower and implies a security risk since there will be network traffic.</para>
            </param>
        </member>
        <member name="M:SizingServers.IPC.Receiver.HandleReceive(System.Net.Sockets.TcpClient)">
            <summary>
            <para>Reads handle size, handle, 1 if message is byte array or 0, message size and message from the stream.</para>
            <para>If the handle in the message is invalid the connection will be closed.</para>
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:SizingServers.IPC.Receiver.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="T:SizingServers.IPC.Sender">
            <summary>
            <para>Add a new Sender in the code of the process you want to send messages. Make sure the handles matches the one of the Receivers.</para>
            <para>This inter process communication only works on the same machine and in the same Windows session.</para>
            <para>Suscribe to OnSendFailed for error handeling. Please not Sending will always fail when a Receiver disappears.</para>
            </summary>
        </member>
        <member name="E:SizingServers.IPC.Sender.BeforeMessageSent">
            <summary>
            
            </summary>
        </member>
        <member name="E:SizingServers.IPC.Sender.AfterMessageSent">
            <summary>
            
            </summary>
        </member>
        <member name="E:SizingServers.IPC.Sender.OnSendFailed">
            <summary>
            
            </summary>
        </member>
        <member name="F:SizingServers.IPC.Sender._hashcode">
            <summary>
            Hashcode of the message. When resending the same data it is not serialized again.
            </summary>
        </member>
        <member name="P:SizingServers.IPC.Sender.IsDisposed">
            <summary>
            </summary>
        </member>
        <member name="P:SizingServers.IPC.Sender.Handle">
            <summary>
            
            </summary>
        </member>
        <member name="P:SizingServers.IPC.Sender.Buffered">
            <summary>
            <para>When true, a message (+ encapsulation) you send is kept in memory. When you resend the same message it will not be serialized again.</para>
            </summary>
        </member>
        <member name="P:SizingServers.IPC.Sender.EndPointManagerServiceConnection">
            <summary>
            <para>This is an optional parameter in the constructor.</para>
            <para>If you don't use it, receiver end points are stored in the Windows registry and IPC communication is only possible for processes running under the current local user.</para>
            <para>If you do use it, these end points are fetched from a Windows service over tcp, making it a distributed IPC.This however will be slower and implies a security risk since there will be network traffic.</para>
            </summary>
        </member>
        <member name="M:SizingServers.IPC.Sender.#ctor(System.String,SizingServers.IPC.EndPointManagerServiceConnection,System.Boolean)">
            <summary>
            <para>Add a new Sender in the code of the process you want to send messages. Make sure the handles matches the one of the Receivers.</para>
            <para>This inter process communication only works on the same machine and in the same Windows session.</para>
            <para>Suscribe to OnSendFailed for error handeling. Please not Sending will always fail when a Receiver disappears.</para>
            </summary>
            <param name="handle">
            <para>The handle is a value shared by a Sender and its Receivers.  , * + and - cannot be used!</para>
            <para>It links both parties so messages from a Sender get to the right Receivers.</para>
            <para>Make sure this is a unique value: use a GUID for instance:</para>
            <para>There is absolutely no checking to see if this handle is used in another Sender - Receivers relation.</para>
            </param>
            <param name="endPointManagerServiceConnection">
            <para>This is an optional parameter.</para>
            <para>If you don't use it, receiver end points are stored in the Windows registry and IPC communication is only possible for processes running under the current local user.</para>
            <para>If you do use it, these end points are fetched from a Windows service over tcp, making it a distributed IPC.This however will be slower and implies a security risk since there will be network traffic.</para>
            </param>
            <param name="buffered">
            <para>When true, a message (+ encapsulation) you send is kept in memory. When you resend the same message it will not be serialized again.</para>
            <para>This buffer can ony hold one message. Using this will make sending messages faster and will take up more memory. Use this wisely for large messages.</para>
            </param>
        </member>
        <member name="M:SizingServers.IPC.Sender.Send(System.Object)">
            <summary>
            Send a message to the Receivers. This is a blocking function.
            </summary>
            <param name="message">
            If the given object is a byte array, it will not be serialized. Otherwise, the object will be serialized using a binary formatter.
            </param>
        </member>
        <member name="M:SizingServers.IPC.Sender.SerializeMessage(System.Object)">
            <summary>
            Writes the handle size, the handle (UTF8 encoding), 1 if message is byte array or 0, the message size and the message to an array.
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:SizingServers.IPC.Sender.SetTcpSenders">
            <summary>
            Clean up the stored tcp clients (_senders) and add new ones if need be.
            </summary>
        </member>
        <member name="M:SizingServers.IPC.Sender.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="T:SizingServers.IPC.EndPointManager">
            <summary>
            Stores end points (handles and tcp ports) in the registry for the IPC message receivers.
            </summary>
        </member>
        <member name="F:SizingServers.IPC.EndPointManager.KEY">
            <summary>
            Used for a key in the registry to store the end points.
            </summary>
        </member>
        <member name="M:SizingServers.IPC.EndPointManager.RegisterReceiver(System.String,SizingServers.IPC.EndPointManagerServiceConnection)">
            <summary>
            Add a new port tot the endpoint for the receiver.
            </summary>
            <param name="handle">
            <para>The handle is a value shared by a Sender and its Receivers.</para>
            <para>It links both parties so messages from a Sender get to the right Receivers.</para>
            <para>Make sure this is a unique value: use a GUID for instance:</para>
            <para>There is absolutely no checking to see if this handle is used in another Sender - Receivers relation.</para>
            </param>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:SizingServers.IPC.EndPointManager.GetReceiverEndPoints(System.String,SizingServers.IPC.EndPointManagerServiceConnection)">
            <summary>
            The sender must use this to be able to send data to the correct receivers.
            </summary>
            <param name="handle">
            <para>The handle is a value shared by a Sender and its Receivers.</para>
            <para>It links both parties so messages from a Sender get to the right Receivers.</para>
            <para>Make sure this is a unique value: use a GUID for instance:</para>
            <para>There is absolutely no checking to see if this handle is used in another Sender - Receivers relation.</para>
            </param>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:SizingServers.IPC.EndPointManager.GetRegisteredEndPoints(SizingServers.IPC.EndPointManagerServiceConnection)">
            <summary>
            </summary>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:SizingServers.IPC.EndPointManager.GetRegisteredEndPoints">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SizingServers.IPC.EndPointManager.CleanupEndPoints(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.KeyValuePair{System.String,System.Collections.Generic.HashSet{System.Int32}}},System.Boolean)">
            <summary>
            Only used for local IPC. When using the end point manager service, this service handles the cleaning.
            </summary>
            <param name="endPoints">All end points that are not used anymore are filtered out.</param>
            <param name="registerEndpoints">Register the cleaned end point is applicable.</param>
        </member>
        <member name="M:SizingServers.IPC.EndPointManager.SetRegisteredEndPoints(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.KeyValuePair{System.String,System.Collections.Generic.HashSet{System.Int32}}},SizingServers.IPC.EndPointManagerServiceConnection)">
            <summary>
            Set endpoints to the registery.
            </summary>
            <param name="endPoints"></param>
            <param name="settings"></param>
        </member>
        <member name="M:SizingServers.IPC.EndPointManager.SetRegisteredEndPoints(System.String)">
            <summary>
            Set endpoints to the registery.
            </summary>
            <param name="endPoints"></param>
        </member>
        <member name="M:SizingServers.IPC.EndPointManager.SendAndReceiveEPM(System.String,System.Net.Sockets.TcpClient)">
            <summary>
            Get the endpoints from the endpoint manager service.
            </summary>
            <param name="client"></param>
            <param name="message">Empty string to get the end points or the end point represeted as a string to set them.</param>
            <returns></returns>
        </member>
        <member name="M:SizingServers.IPC.EndPointManager.GetAvailableTcpPort">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SizingServers.IPC.EndPointManager.GetUsedTcpPorts">
            <summary>
            Only take used tcp ports into accounts. What's been registered in the registry does not matter.
            </summary>
            <returns></returns>
        </member>
        <member name="T:SizingServers.IPC.EndPointManagerServiceConnection">
            <summary>
            </summary>
        </member>
        <member name="P:SizingServers.IPC.EndPointManagerServiceConnection.EndPointManagerServiceEP">
            <summary>
            End point info to connect to the service over tcp.
            </summary>
        </member>
        <member name="T:SizingServers.IPC.Shared">
            <summary>
            Shared functions for internal and external use.
            </summary>
        </member>
        <member name="M:SizingServers.IPC.Shared.GetBytes(System.String)">
            <summary>
            UTF8
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:SizingServers.IPC.Shared.GetBytes(System.Int64)">
            <summary>
            
            </summary>
            <param name="l"></param>
            <returns></returns>
        </member>
        <member name="M:SizingServers.IPC.Shared.GetByte(System.Boolean)">
            <summary>
            
            </summary>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:SizingServers.IPC.Shared.GetBytes(System.Object,System.Runtime.Serialization.Formatters.Binary.BinaryFormatter)">
            <summary>
            
            </summary>
            <param name="o"></param>
            <param name="bf"></param>
            <returns></returns>
        </member>
        <member name="M:SizingServers.IPC.Shared.GetLong(System.Byte[])">
            <summary>
            
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:SizingServers.IPC.Shared.GetString(System.Byte[])">
            <summary>
            UTF8
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:SizingServers.IPC.Shared.GetBool(System.Byte[])">
            <summary>
            
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:SizingServers.IPC.Shared.GetObject(System.Byte[],System.Runtime.Serialization.Formatters.Binary.BinaryFormatter)">
            <summary>
            
            </summary>
            <param name="bytes"></param>
            <param name="bf"></param>
            <returns></returns>
        </member>
        <member name="M:SizingServers.IPC.Shared.ReadBytes(System.IO.Stream,System.Int32,System.Int64)">
            <summary>
            
            </summary>
            <param name="str"></param>
            <param name="bufferSize"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:SizingServers.IPC.Shared.WriteBytes(System.IO.Stream,System.Int32,System.Byte[])">
            <summary>
            
            </summary>
            <param name="str"></param>
            <param name="bufferSize"></param>
            <param name="bytes"></param>
        </member>
    </members>
</doc>
